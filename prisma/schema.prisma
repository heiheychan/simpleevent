// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String?        
  email           String        @unique
  email_verified  Boolean       @default(false)
  password        String
  events          EventsOnUsers[]
  commitments     Commitment[]

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model Event {
  id              String           @id
  name            String
  datetime        DateTime
  location        String
  covercolor      String           @default("#B8E0FD")
  maxguests       Int
  users           EventsOnUsers[] 
  foods           Food[]

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model EventsOnUsers {
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  event           Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  host            Boolean @default(false)

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@id([userId, eventId])
}

model Food {
  id              Int           @id @default(autoincrement())
  name            String       
  order           Int
  event           Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  commitments     Commitment[]

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model Commitment {
  id              Int           @id @default(autoincrement())
  foodId          Int
  food            Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  userId          Int
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment         String        @default("")

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}